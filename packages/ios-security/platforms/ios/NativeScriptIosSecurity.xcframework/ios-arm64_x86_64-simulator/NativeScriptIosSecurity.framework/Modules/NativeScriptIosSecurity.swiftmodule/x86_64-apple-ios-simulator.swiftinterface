// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NativeScriptIOSSecurity
import CommonCrypto
import Darwin
import Foundation
import MachO
@_exported import NativeScriptIOSSecurity
import Swift
import UIKit
import _Concurrency
public enum FileIntegrityCheck {
  case bundleID(Swift.String)
  case mobileProvision(Swift.String)
  case machO(Swift.String, Swift.String)
}
extension NativeScriptIOSSecurity.FileIntegrityCheck {
  public var description: Swift.String {
    get
  }
}
public typealias FileIntegrityCheckResult = (result: Swift.Bool, hitChecks: [NativeScriptIOSSecurity.FileIntegrityCheck])
public typealias FailedCheck = (check: NativeScriptIOSSecurity.JailbreakCheck, failMessage: Swift.String)
public enum JailbreakCheck : Swift.CaseIterable {
  case urlSchemes
  case existenceOfSuspiciousFiles
  case suspiciousFilesCanBeOpened
  case restrictedDirectoriesWriteable
  case fork
  case symbolicLinks
  case dyld
  public static func == (a: NativeScriptIOSSecurity.JailbreakCheck, b: NativeScriptIOSSecurity.JailbreakCheck) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [NativeScriptIOSSecurity.JailbreakCheck]
  public static var allCases: [NativeScriptIOSSecurity.JailbreakCheck] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class FileIntegrityCheckFacade : ObjectiveC.NSObject {
  public var origin: NativeScriptIOSSecurity.FileIntegrityCheck
  @objc public init(bundleID: Swift.String)
  @objc public init(mobileProvision: Swift.String)
  @objc public init(machO: Swift.String, machO1: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SecurityFacade : ObjectiveC.NSObject {
  @objc public static func amIJailbroken() -> Swift.Bool
  @objc public static func amIDebugged() -> Swift.Bool
  @objc public static func amIRunInEmulator() -> Swift.Bool
  @objc public static func denyDebugger()
  @objc public static func amIReverseEngineered() -> Swift.Bool
  @objc public static func amIProxied() -> Swift.Bool
  @objc public static func amITampered(_ checks: [NativeScriptIOSSecurity.FileIntegrityCheckFacade]) -> [Any]
  @objc public static func amIRuntimeHooked(dyldWhiteList: [Swift.String], detectionClass: Swift.AnyClass, selector: ObjectiveC.Selector, isClassMethod: Swift.Bool) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
public class IOSSecuritySuite {
  public static func amIJailbroken() -> Swift.Bool
  public static func amIJailbrokenWithFailMessage() -> (jailbroken: Swift.Bool, failMessage: Swift.String)
  public static func amIJailbrokenWithFailedChecks() -> (jailbroken: Swift.Bool, failedChecks: [NativeScriptIOSSecurity.FailedCheck])
  public static func amIRunInEmulator() -> Swift.Bool
  public static func amIDebugged() -> Swift.Bool
  public static func denyDebugger()
  public static func amITampered(_ checks: [NativeScriptIOSSecurity.FileIntegrityCheck]) -> NativeScriptIOSSecurity.FileIntegrityCheckResult
  public static func amIReverseEngineered() -> Swift.Bool
  public static func amIRuntimeHooked(dyldWhiteList: [Swift.String], detectionClass: Swift.AnyClass, selector: ObjectiveC.Selector, isClassMethod: Swift.Bool) -> Swift.Bool
  public static func amIProxied() -> Swift.Bool
  @objc deinit
}
extension NativeScriptIOSSecurity.JailbreakCheck : Swift.Equatable {}
extension NativeScriptIOSSecurity.JailbreakCheck : Swift.Hashable {}
